generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
}

enum Role {
  USER
  ADMIN
}

enum Status {
  REGISTERED
  UNREGISTERED
}

model User {
  id              BigInt       @id @default(autoincrement())
  email           String       @db.VarChar(60)
  password        String       @db.VarChar(200)
  firstName       String       @map("first_name") @db.VarChar(40)
  lastName        String       @map("last_name") @db.VarChar(40)
  nickname        String       @db.VarChar(50)
  phoneNumber     String       @map("phone_ number") @db.VarChar(30)
  gender          Gender       @map("gender")
  birthYear       Int          @map("birth_year")
  birthMonth      Int          @map("birth_month")
  birthDate       Int          @map("birth_date")
  profilePhotoUrl String?      @map("profile_photo_url") @db.VarChar(512)
  role            Role         @default(USER) @map("role")
  status          Status       @default(REGISTERED) @map("status")
  addressInfo     AddressInfo? // 1-1
  diaryList       Diary[] // 1-N
  createdAt       DateTime     @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt       DateTime?    @map("updated_at") @db.DateTime(0)
  deletedAt       DateTime?    @map("deleted_at") @db.DateTime(0)
  isDeleted       Boolean      @default(false) @map("is_deleted")

  @@map("users")
}

model AddressInfo {
  id            BigInt    @id @default(autoincrement())
  userId        BigInt    @unique @map("user_id")
  user          User      @relation(fields: [userId], references: [id]) // 1-1
  zipCode       Int       @map("zip_code") @db.UnsignedInt
  mainAddress   String    @map("main_address") @db.VarChar(200)
  detailAddress String    @map("detail_address") @db.VarChar(200)
  createdAt     DateTime  @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt     DateTime? @map("updated_at") @db.DateTime(0)
  deletedAt     DateTime? @map("deleted_at") @db.DateTime(0)
  isDeleted     Boolean   @default(false) @map("is_deleted")

  @@map("address_infos")
}

model Diary {
  id                  BigInt            @id @default(autoincrement())
  userId              BigInt            @map("user_id")
  user                User              @relation(fields: [userId], references: [id]) // 1-N
  recommendedFoodList RecommendedFood[] // 1-N
  diaryEmotionList    DiaryEmotion[] // 1-N
  title               String            @db.VarChar(150)
  content             String            @db.Text
  weather             String?           @db.VarChar(40)
  publishedDate       DateTime          @map("published_date") @db.Date
  createdAt           DateTime          @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt           DateTime?         @map("updated_at") @db.DateTime(0)
  deletedAt           DateTime?         @map("deleted_at") @db.DateTime(0)
  isDeleted           Boolean           @default(false) @map("is_deleted")

  @@map("diaries")
}

model DiaryEmotion {
  id           BigInt    @id @default(autoincrement())
  diaryId      BigInt    @map("diary_id")
  diary        Diary     @relation(fields: [diaryId], references: [id]) // 1-N
  emotion      String    @db.VarChar(30)
  emotionScore Decimal   @map("emotion_score") @db.Decimal(3, 2)
  createdAt    DateTime  @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt    DateTime? @map("updated_at") @db.DateTime(0)
  deletedAt    DateTime? @map("deleted_at") @db.DateTime(0)
  isDeleted    Boolean   @default(false) @map("is_deleted")

  @@map("diary_emotions")
}

model RecommendedFood {
  id        BigInt    @id @default(autoincrement())
  diaryId   BigInt    @map("diary_id")
  diary     Diary     @relation(fields: [diaryId], references: [id]) // 1-N
  foodName  String    @map("food_name") @db.VarChar(100)
  createdAt DateTime  @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt DateTime? @map("updated_at") @db.DateTime(0)
  deletedAt DateTime? @map("deleted_at") @db.DateTime(0)
  isDeleted Boolean   @default(false) @map("is_deleted")

  @@map("recommended_foods")
}
